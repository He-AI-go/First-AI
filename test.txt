import numpy as np
import matplotlib.pyplot as plt

# 生成随机数据
np.random.seed(42)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)

# 线性回归的梯度下降算法
def linear_regression_gradient_descent(X, y, learning_rate=0.01, iterations=1000):
    m = len(X)
    theta0 = 0
    theta1 = 0
    cost_history = []
    for _ in range(iterations):
        h = theta0 + theta1 * X
        theta0_derivative = (1 / m) * np.sum(h - y)
        theta1_derivative = (1 / m) * np.sum((h - y) * X)
        theta0 = theta0 - learning_rate * theta0_derivative
        theta1 = theta1 - learning_rate * theta1_derivative
        cost = (1 / (2 * m)) * np.sum((h - y)**2)
        cost_history.append(cost)
    return theta0, theta1, cost_history

# 运行梯度下降算法
theta0, theta1, cost_history = linear_regression_gradient_descent(X, y)

# 绘制数据点和拟合直线
plt.scatter(X, y)
plt.plot(X, theta0 + theta1 * X, color='red')
plt.xlabel('X')
plt.ylabel('y')
plt.title('Linear Regression using Gradient Descent')

# 绘制代价函数随迭代次数的变化
plt.figure()
plt.plot(range(len(cost_history)), cost_history)
plt.xlabel('Iterations')
plt.ylabel('Cost')
plt.title('Cost Function vs Iterations')

plt.show()